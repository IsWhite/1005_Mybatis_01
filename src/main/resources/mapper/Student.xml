<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--该文件是用于进行数据库表中某个表的操作声明,
相当于dao层中的实现类,例如以前写的StudentDaompl,里面定义一些列操作数据表的sql语句

namespace:声明该操作文件对外提供的接口类路径是谁,相当于StudentDao接口-->

    <!--
    select:查询标签,执行查询语句,常用于属性:
    id:唯一标识该操作的名称,与对应接口(StudentDao)中的某个方法名
    parameterType(parameterMap可以定义多个不同的对象):定义sql语句中重要的参数,即条件查询中的参数,对应接口中方法的参数列表,
            注意接口中的参数只能有一个,对于多个参数可以封装到一个pojo类中
    resultType(resultMap):返回结果声明,对应一个map,以及key,value的形式存储返回的数据
    -->
<mapper namespace="com.ssm.mapper.StudentMapper">
    <select id="selectAll"
            resultType="com.ssm.domain.Student">
        SELECT *FROM Student
    </select>

    <!--分页查询
    在mapper文件中用#{}属性名的方式取传递过来的参数值,如果传递过来的参数
    是一个基本类型则可以用#{value}获取;
    如果是pojo,则通过#{属性名}获取某个值,
    如果是字符串拼接用${}
    -->
    <select id="pageSelect"
            resultType="com.ssm.domain.Student"
            parameterType="com.ssm.page.PageBean">
        SELECT * FROM  Student
        WHERE sname LIKE '%${parameter.sname}%'
        limit #{startIndex},#{pageSize}
    </select>

    <!--学生表总条数-->
    <select id="getTotalRecord"
            parameterType="com.ssm.page.PageBean"
            resultType="java.lang.Integer">
        SELECT COUNT(sid) FROM Student
         WHERE sname LIKE '%${parameter.sname}%'
    </select>

</mapper>

<!--
1最上面的声明
2先写xml 再写接口
<mapper namespace="接口类路径(提供)">
    <select id="方法名"
            resultType="实体类路径">
        sql语句
        </select>
</mapper>-->